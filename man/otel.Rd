% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/otel.R
\name{with_ospan_async}
\alias{with_ospan_async}
\alias{create_ospan}
\alias{end_ospan}
\alias{with_ospan_promise_domain}
\title{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}} OpenTelemetry integration}
\usage{
with_ospan_async(
  name,
  expr,
  ...,
  tracer = promises_otel_tracer(),
  attributes = NULL
)

create_ospan(name, ..., tracer = promises_otel_tracer(), attributes = NULL)

end_ospan(span, tracer = promises_otel_tracer())

with_ospan_promise_domain(span, expr)
}
\arguments{
\item{name}{Character string. The name of the span.}

\item{expr}{An expression to evaluate within the span context.}

\item{...}{Additional arguments passed to \code{\link[otel:start_span]{otel::start_span()}}.}

\item{tracer}{An \code{{otel}} tracer. The default value is set to promises
package (which it would eventually calculate). It is strongly recommended
to provide your own tracer from your own package. See
\code{\link[otel:get_tracer]{otel::get_tracer()}} for more details.}

\item{attributes}{Attributes passed through \code{\link[otel:as_attributes]{otel::as_attributes()}} (when
not \code{NULL})}

\item{span}{An OpenTelemetry span object.}
}
\description{
\pkg{otel} provides tools for integrating with OpenTelemetry, a framework for
observability and tracing in distributed systems.

These methods are intended to enhance the framework to be used with the
\pkg{promises} package, not as a generic replacement.
}
\section{Functions}{
\itemize{
\item \code{with_ospan_async()}: \ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}

Creates an OpenTelemetry span, executes the given expression within it, and
ends the span.

This function is designed to handle both synchronous and asynchronous
(promise-based) operations. For promises, the span is automatically ended
when the promise resolves or rejects.

Returns the result of evaluating \code{expr}. If \code{expr} returns a promise,
the span will be automatically ended when the promise completes.

This function differs from synchronous otel span operations in that it
installs a promise domain and properly handles asynchronous operations. In
addition, the internal span will be ended either when the function exits (for
synchronous operations) or when a returned promise completes (for
asynchronous operations).

If OpenTelemetry is not enabled, the expression will be evaluated without any
tracing context.

\item \code{create_ospan()}: \ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}

Creates an OpenTelemetry span for discontiguous operations where you need
manual control over when the span ends.

Note, the created span is not activated. Please use \code{\link[=with_ospan_async]{with_ospan_async()}} to
activate it for the supplied expression.

Returns an \pkg{otel} span object.

\item \code{end_ospan()}: \ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}

Ends an created OpenTelemetry span for discontiguous operations.

\item \code{with_ospan_promise_domain()}: \ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}

Executes an expression within the context of an active OpenTelemetry span.

Adds an "Active OpenTelemetry promise domain" to the expression evaluation.
This span will be reactivated during promise domain restoration.

}}
\examples{
\dontrun{
# Synchronous operation
result <- with_ospan_async("my_operation", {
  # ... do some work ...
  42
})

# Asynchronous operation
p <- with_ospan_async("async_operation", {
  # ... return a promise ...
  some_async_function()
})
}
\dontrun{
# Start a span for discontiguous work (uncommon; use with caution)
spn <- create_ospan("my_operation")
with_ospan_promise_domain(spn, {
  # ... do some work ...
})
# ...
# End span when ready
end_ospan(spn)
}

}
\keyword{internal}
